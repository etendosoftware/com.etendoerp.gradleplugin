package com.etendoerp.gradle.jars.modules

import org.gradle.testkit.runner.BuildResult
import org.gradle.testkit.runner.TaskOutcome
import spock.lang.Issue
import spock.lang.Shared
import spock.lang.TempDir
import spock.lang.Title

@Title("Test to verify the correct creation of the JAR file, containing the nested subclasses but not the autogenerated subclasses.")
class CreationOfJarWithSubclassesTest extends ModuleToJarSpecificationTest {
    @TempDir @Shared File testProjectDir

    @Override
    File getProjectDir() {
        testProjectDir
    }

    @Issue("ERP-588")
    def "Creation of a JAR from a module with nested classes and autogenerated nested classes"() {
        given: "A Etendo project with a module to be converted to JAR"
        def module = "com.test.dummytofill"

        and: "The module contains java classes '#customclasses' with nested subclasses '#customNestedClasses' in the 'src' folder to be compiled"
        def srcLocation = "${testProjectDir.absolutePath}/modules/$module/src/${moduleToPath(module)}"
        createJavaFiles([module: module, location: srcLocation, javaClasses: customClasses, nestedClasses: customNestedClasses])

        and: "The project contains autogenerated classes '#autogenClasses' with nested subclasses '#autogenNestedClasses' in the 'src-gen' folder with the same java package of the module"
        def srcGenLocation = "${testProjectDir.absolutePath}/src-gen/${moduleToPath(module)}"
        createJavaFiles([module: module, location: srcGenLocation, javaClasses: autogenClasses, nestedClasses: autogenNestedClasses])

        and: "The users runs the 'generate.entities' task"
        def entitiesResult = runTask(":generate.entities") as BuildResult
        entitiesResult.task(":generate.entities").outcome == TaskOutcome.SUCCESS

        and: "The corresponding '.class' files from the 'module/src' are generated in the 'build/classes' directory, corresponding with the package folder"
        validateClassFiles(module, customClasses, customNestedClasses)

        and: "The corresponding '.class' files from the 'src-gen' are generated in the 'build/classes' directory, corresponding with the package folder"
        validateClassFiles(module, autogenClasses, autogenNestedClasses)

        when: "The jar task is ran in the module subproject"
        def jarResult = runTask(":modules:$module:jar", "-Ppkg=$module") as BuildResult

        then: "The task will complete successfully."
        jarResult.task(":modules:$module:jar").outcome == TaskOutcome.SUCCESS

        and: "The jar file will be created in the /build/libs of the module folder."
        def jarFile = new File("${testProjectDir.absolutePath}/modules/$module/build/libs/$module-1.0.0.jar")
        assert jarFile.exists()

        and: "The jar file will only contain the 'classes' from the 'src' directory of the module, including the subclasses"
        def srcClassFiles = getListOfClasses(module, customClasses, customNestedClasses)
        containsClassFiles(jarFile, srcClassFiles)

        where:
        customClasses   | customNestedClasses              | autogenClasses         | autogenNestedClasses
        ["CustomClass"] | ["NestedClass0", "NestedClass1"] | ["CustomAutogenClass"] | ["AutogenNested0", "AutogenNested1"]

    }


    void createJavaFiles(Map map=[:]) {
        String location            = map.location
        String module              = map.module
        List<String> javaClasses   = map.javaClasses as List<String>
        List<String> nestedClasses = map.nestedClasses as List<String>

        File createdLocation = new File(location)
        if (!createdLocation.exists()) {
            createdLocation.mkdirs()
        }

        javaClasses.each {javaClassName ->
            def javaClass = new File("${createdLocation.absolutePath}/${javaClassName}.java")
            javaClass.createNewFile()
            javaClass << dummyJavaClassNested(module, javaClassName,"customClassMethod", nestedClasses)
        }
    }

    def getListOfClasses(String module, List<String> customClasses, List<String> nestedClasses) {
        def list = []
        def modulePath = moduleToPath(module)
        for (String customClass : customClasses) {
            list.add("${modulePath}/${customClass}.class")
            for (String nested : nestedClasses) {
                def nestedClass = "${customClass}\$${nested}"
                list.add("${modulePath}/${nestedClass}.class")
            }
        }
        return list
    }

    void validateClassFiles(String module, List<String> customClasses, List<String> nestedClasses) {
        for (String customClass : customClasses) {
            assert new File("${testProjectDir.absolutePath}/build/classes/${moduleToPath(module)}/${customClass}.class").exists()
            for (String nested : nestedClasses) {
                def nestedClass = "${customClass}\$${nested}"
                assert new File("${testProjectDir.absolutePath}/build/classes/${moduleToPath(module)}/${nestedClass}.class").exists()
            }
        }
    }

}
