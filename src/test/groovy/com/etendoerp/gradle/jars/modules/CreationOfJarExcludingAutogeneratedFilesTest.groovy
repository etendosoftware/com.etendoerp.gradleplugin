package com.etendoerp.gradle.jars.modules

import org.gradle.testkit.runner.BuildResult
import org.gradle.testkit.runner.TaskOutcome
import spock.lang.Issue
import spock.lang.Shared
import spock.lang.TempDir

import java.util.zip.ZipFile

class CreationOfJarExcludingAutogeneratedFilesTest extends ModuleToJarSpecificationTest{

    @TempDir @Shared File testProjectDir

    @Override
    File getProjectDir() {
        testProjectDir
    }

    @Issue("ERP-588")
    def "Creation of a JAR from a module excluding autogenerated '.class' files"() {

        given: "A Etendo project with the generated entities"
        def entitiesResult = runTask(":generate.entities") as BuildResult
        entitiesResult.task(":generate.entities").outcome == TaskOutcome.SUCCESS
        def generated = new File("${testProjectDir.absolutePath}/build/tmp/generated")

        and: "A module to create its JAR version"
        def module = "com.test.dummyAutogenTest"

        when: "The jar task is runned in the module subproject"
        def jarResult = runTask(":modules:$module:jar", "-Ppkg=$module") as BuildResult

        then: "The task will complete successfully."
        jarResult.task(":modules:$module:jar").outcome == TaskOutcome.SUCCESS

        and: "The jar file will be created in the /build/libs of the module folder."
        def jarFile = new File("${testProjectDir.absolutePath}/modules/$module/build/libs/$module-1.0.0.jar")
        assert jarFile.exists()

        and: "The jar file should not contain the autogenerated '.class' files from the 'generated' file"
        hasNotAutogeneratedClassFiles(jarFile, generated)
    }

    void hasNotAutogeneratedClassFiles(File jarFile, File generated) {
        def classFiles = getFilesFromJar([jarFile: jarFile, pathToIgnore: "META-INF/etendo", fileExtension: ".class"])
        def generatedFileList = getFilesFromGenerated(generated)

        classFiles.each {
            def file = it.replace(".class","").replace(File.separator,".")

            assert !generatedFileList.contains(it)

        }

    }

    String[] getFilesFromGenerated(File generated) {
        def files = []
        generated.eachLine {
            files.add(it)
        }
        return files
    }

}
