package com.etendoerp.gradle.jars.modules

import org.gradle.testkit.runner.BuildResult
import org.gradle.testkit.runner.TaskOutcome
import spock.lang.Issue
import spock.lang.Shared
import spock.lang.TempDir
import spock.lang.Title

@Title("Test to verify that the created JAR is not containing the autogenerated class files")
class CreationOfJarExcludingAutogeneratedFilesTest extends ModuleToJarSpecificationTest{

    @TempDir @Shared File testProjectDir

    @Override
    File getProjectDir() {
        testProjectDir
    }

    @Issue("ERP-588")
    def "Creation of a JAR from a module with autogenerated java classes"() {
        given: "A Etendo project with a module to be converted to JAR"
        def module = "com.test.dummytofill"

        and: "The module contains a java class in the 'src' folder to be compiled"
        def javaClassName = "CustomClass"
        def javaClass = new File("${testProjectDir.absolutePath}/modules/$module/src/${moduleToPath(module)}/${javaClassName}.java")
        javaClass.createNewFile()
        javaClass << dummyJavaClassNested(module, javaClassName, "customClassMethod")

        and: "There is a autogenerated java class in the 'src-gen' folder using the same java package of the module"
        def javaClassNameAutogen = "CustomAutogenClass"
        def javaClassAutogen = new File("${testProjectDir.absolutePath}/src-gen/${moduleToPath(module)}/${javaClassNameAutogen}.java")
        javaClassAutogen.createNewFile()
        javaClassAutogen << dummyJavaClassNested(module, javaClassNameAutogen, "customClassAutogenMethod")

        and: "The users runs the 'generate.entities' task"
        def entitiesResult = runTask(":generate.entities") as BuildResult
        entitiesResult.task(":generate.entities").outcome == TaskOutcome.SUCCESS

        and: "The corresponding '.class' files are generated in the 'build/classes' directory, corresponding with the package folder"
        assert new File("${testProjectDir.absolutePath}/build/classes/${moduleToPath(module)}/${javaClassName}.class").exists()
        assert new File("${testProjectDir.absolutePath}/build/classes/${moduleToPath(module)}/${javaClassNameAutogen}.class").exists()

        when: "The jar task is ran in the module subproject"
        def jarResult = runTask(":modules:$module:jar", "-Ppkg=$module") as BuildResult

        then: "The task will complete successfully."
        jarResult.task(":modules:$module:jar").outcome == TaskOutcome.SUCCESS

        and: "The jar file will be created in the /build/libs of the module folder."
        def jarFile = new File("${testProjectDir.absolutePath}/modules/$module/build/libs/$module-1.0.0.jar")
        assert jarFile.exists()

        and: "The jar file will only contain the 'classes' from the 'src' directory of the module"
        def srcClassFiles = ["${moduleToPath(module)}/${javaClassName}.class"]
        containsClassFiles(jarFile, srcClassFiles)
    }

}
