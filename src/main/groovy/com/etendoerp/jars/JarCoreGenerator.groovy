package com.etendoerp.jars

import com.etendoerp.dependencies.DependenciesLoader
import org.gradle.api.Project
import org.gradle.api.file.FileTreeElement
import org.gradle.api.tasks.Copy
import org.gradle.api.tasks.bundling.Jar

class JarCoreGenerator {

    public static final String RESOURCES_DIR = 'build/resources'
    public static final String RESOURCES_JAR_DESTINATION = 'META-INF/'
    public static final String BUILD_CLASSES = 'build/classes'
    public static final String ETENDO_CORE = 'etendo-core'

    static load(Project project) {

        project.dependencies {
            implementation project.fileTree(dir: "${project.rootDir}/lib", include: ['**/*.jar'])
            implementation project.fileTree(dir: "${project.rootDir}/modules", include: ['**/*.jar'])
            implementation project.fileTree(dir: "${project.rootDir}/modules_core", include: ['**/*.jar'])
            implementation project.fileTree(dir: "${project.rootDir}/src-core/lib", include: ['**/*.jar'])
            implementation project.fileTree(dir: "${project.rootDir}/src-wad/lib", include: ['**/*.jar'])
            implementation project.fileTree(dir: "${project.rootDir}/src-trl/lib", include: ['**/*.jar'])
            implementation project.fileTree(dir: "${project.rootDir}/src-db/database/lib", include: ['**/*.jar'])
        }

        project.tasks.register("jarConfig") {
            doLast {
                project.logger.info("Starting JAR configuration.")
                def jarTask = (project.jar as Jar)
                def generated = Utils.loadGeneratedEntitiesFile(project)

                jarTask.archiveBaseName.set(ETENDO_CORE)
                //Excluding src-gen
                jarTask.exclude(PathUtils.fromPackageToPathClass(generated))

                /**
                 * 'srcAD' java files should be excluded from the generated JAR, has they are autogenerated.
                 */
                def srcADfiles = project.fileTree("${project.rootDir}/srcAD").matching({
                    include ("**/*${FileExtensions.JAVA}")
                    include ("**/*${FileExtensions.XSQL}")
                }).collect {
                    String filePath = it.absolutePath.replace("${project.rootDir}/srcAD/", "")
                    if (filePath.endsWith(FileExtensions.JAVA)) {
                        return filePath.replace(FileExtensions.JAVA, "")
                    }
                    if (filePath.endsWith(FileExtensions.XSQL)) {
                        return filePath.replace("_data${FileExtensions.XSQL}","Data")
                    }
                }

                jarTask.exclude(PathUtils.fromPackageToPathClass(srcADfiles))

                // Workaround for issue: https://issues.apache.org/jira/browse/LOG4J2-673
                jarTask.exclude "**/Log4j2Plugins.dat"

                List includedJarsLocation = [
                        "src-db/database/lib/dbsourcemanager.jar",
                        "src-db/database/lib/dbmanager.jar",
                        "src-wad/lib/openbravo-wad.jar",
                        "src-trl/lib/openbravo-trl.jar",
                        "src-core/lib/openbravo-core.jar"
                ]

                List<File> jarFiles = []

                includedJarsLocation.each {
                    def jarFile = new File(project.rootDir, it)
                    if (jarFile.exists()) {
                        jarFiles.add(jarFile)
                    }
                }

                def jarFilesFileTree = jarFiles.collect {
                    project.zipTree(it)
                }

                // Create a "fat" jar
                jarTask.from {
                    jarFilesFileTree
                }

                jarTask.from(RESOURCES_DIR) {
                    into(RESOURCES_JAR_DESTINATION)
                }

                jarTask.manifest {
                    // make lo4j2 work in the generated jar, since the log4j jar is a multirelease one
                    attributes 'Multi-Release': 'true'
                }

            }
        }

        project.tasks.register("sourcesJarConfig") {
            doLast {
                project.logger.info("Starting Sources JAR configuration.")
                def generated = Utils.loadGeneratedEntitiesFile(project)
                def sourcesJarTask = (project.sourcesJar as Jar)

                //Excluding src-gen
                sourcesJarTask.exclude(PathUtils.fromPackageToPathJava(generated))

                sourcesJarTask.exclude 'META-INF'
                sourcesJarTask.exclude 'src-gen'
                sourcesJarTask.exclude '.keep'
                sourcesJarTask.exclude '*.xml'
                sourcesJarTask.exclude '*.jsp'
            }
        }

        project.tasks.register("cleanResources") {
            doLast {
                def resourcesFolder = new File("${project.buildDir}/resources")
                if (resourcesFolder.exists() && resourcesFolder.isDirectory()) {
                    resourcesFolder.deleteDir()
                }
            }
        }

        /**
         * When core in jar, modules dir in the root could have custom src-wad files
         * This files needs to be compiled, and are used in the 'wad' task.
         */
        project.tasks.register("copySrcWad", Copy) {
            from "${project.projectDir}/src-wad"
            include "build.xml"
            exclude "**/*${FileExtensions.JAR}"
            into "${project.buildDir}/resources/etendo/src-wad"
        }

        /**
         * beans.xml template used to prevent scanning all the classes in the Etendo core fat jar
         * Using 'jandex' index, this file is not used.
         */
        project.tasks.register("copyBeans", Copy) {
            from "${project.projectDir}/resources/META-INF/beans.xml.jar.template"
            into "${project.buildDir}/resources"
            rename("beans.xml.jar.template","beans.xml")
        }

        project.tasks.register("copySrcDB", Copy) {
            from "${project.projectDir}/src-db"
            exclude "**/*${FileExtensions.JAVA}"
            exclude "**/*${FileExtensions.HBM_XML}"
            exclude "**/*${FileExtensions.XSQL}"
            exclude "**/*${FileExtensions.JAR}"
            into "${project.buildDir}/resources/etendo/src-db"
        }

        project.tasks.register("copySrc", Copy) {
            from "${project.projectDir}/src"
            exclude "**/*${FileExtensions.JAVA}"
            exclude "**/*${FileExtensions.HBM_XML}"
            exclude "**/*${FileExtensions.XSQL}"
            into "${project.buildDir}/resources/etendo/src"
        }

        project.tasks.register("copyModules", Copy) {
            from "${project.projectDir}/modules"
            exclude "**/*${FileExtensions.JAVA}"
            exclude "**/*${FileExtensions.HBM_XML}"
            exclude "**/*${FileExtensions.XSQL}"
            exclude "**/*${FileExtensions.JAR}"
            into "${project.buildDir}/resources/etendo/modules"
        }

        project.tasks.register("copyModulesCore", Copy) {
            from "${project.projectDir}/modules_core"
            exclude "**/*${FileExtensions.JAVA}"
            exclude "**/*${FileExtensions.HBM_XML}"
            exclude "**/*${FileExtensions.XSQL}"
            exclude "**/*${FileExtensions.JAR}"
            into "${project.buildDir}/resources/etendo/modules"
        }

        project.tasks.register("copySrcUtil", Copy) {
            from ("${project.projectDir}/src-util") {
                include "**/*${FileExtensions.CLASS}"
                include"**/build.xml"
                exclude "diagnostic/**"
            }
            into "${project.buildDir}/resources/etendo/src-util"
        }

        project.tasks.register("copyWebResources", Copy) {
            from ("${project.projectDir}/web",)
            into "${project.buildDir}/resources/etendo/web"
        }
        project.tasks.register("copyBuild", Copy) {
            from ("${project.projectDir}")
            include "build.xml"
            into "${project.buildDir}/resources/etendo"
        }
        project.tasks.register("copyReferenceData", Copy) {
            from ("${project.projectDir}/referencedata")
            into "${project.buildDir}/resources/etendo/referencedata"
        }

        project.tasks.register("copyConfig", Copy) {
            from ("${project.projectDir}/config")
            include ("**/*.template")
            exclude 'Format.xml'
            exclude 'Openbravo.properties'
            exclude 'checksums'
            exclude 'log4j2-web.xml'
            exclude 'log4j2.xml'
            exclude 'redisson-config.yaml'
            into "${project.buildDir}/resources/etendo/config"
        }

        def resourcesDirs = [
                "copyReferenceData",
                "copyConfig",
                "copyBuild",
                "copyBeans",
                "copySrcDB",
                "copySrc",
                "copySrcWad",
                "copyModules",
                "copyModulesCore",
                "copySrcUtil",
                "copyWebResources"
        ]

        /**
         * The cleanResources task must run before the Copy task and Jandex to prevent deleting
         * the 'resources' directory.
         */
        project.jar.dependsOn("jarConfig")
        resourcesDirs.each {
            project.tasks.findByName(it).mustRunAfter("cleanResources")
        }
        def jandexTask = project.tasks.findByName("jandex")
        if (jandexTask) {
            jandexTask.mustRunAfter(project.tasks.findByName("cleanResources"))
        }

        project.tasks.findByName("jarConfig").dependsOn(project.tasks.findByName("cleanResources"))
        project.jarConfig.dependsOn(resourcesDirs)
        project.sourcesJar.dependsOn("sourcesJarConfig")

    }
}