pipeline {
    agent {
        label 'etendo_core' //The id of the slave/agent where the build should be executed, if it doesn't matter use "agent any" instead.
    }

    environment {
        CONTEXT_NAME    = 'etendo'
        BBDD_SID        = 'etendo'
        BBDD_PORT       = '5432'
        BBDD_SYSTEMUSER = 'postgres'
        BBDD_SYSTEMPASS = 'syspass'
        BBDD_USER       = 'tad'
        BBDD_PASSWORD    = 'tad'
        NEXUS_USER      =  credentials('nexus-admin-user')
        NEXUS_PASSWORD  =  credentials('nexus-admin-passwd')
        JAVA_HOME       = '/usr/lib/jvm/java-11-openjdk-amd64'
    }

    stages {
        stage('Run Tests') {
            steps { //Checking out the repo
                script {
                    withCredentials([usernamePassword(credentialsId: "koodu_credentials", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        try {
                            sh 'printenv'
                            sh 'chmod a+x ./pipelines/build-update.sh'
                            sh "./pipelines/build-update.sh etendo_gradle_plugin INPROGRESS 'Starting build'"
                            sh './gradlew --version --info' //run a gradle task
                            sh """
                            echo -e "mavenUser=${NEXUS_USER}\n
                            mavenPassword=${NEXUS_PASSWORD}\n
                            nexusUser=${NEXUS_USER}\n
                            nexusPassword=${NEXUS_PASSWORD}\n
                            test.bbdd.url=jdbc:postgresql://localhost:5432\n
                            test.bbdd.sid=${BBDD_SID}\n
                            test.bbdd.systemUser=${BBDD_SYSTEMUSER}\n
                            test.bbdd.systemPassword=${BBDD_SYSTEMPASS}\n
                            test.bbdd.user=${BBDD_USER}\n
                            test.bbdd.password=${BBDD_PASSWORD}\n
                            org.gradle.daemon=false\n
                            org.gradle.jvmargs=-Xmx2g -XX:MaxPermSize=1024m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8" > ./gradle.properties
                            """
                            sh './gradlew test --info' //run a gradle task
                            currentBuild.result = 'SUCCESS'
                            sh "./pipelines/build-update.sh etendo_gradle_plugin SUCCESSFUL 'Build successful' $GIT_USERNAME $GIT_PASSWORD"

                            publishHTML([
                                allowMissing: true,
                                alwaysLinkToLastBuild: false,
                                keepAll: true,
                                reportDir: 'build/spock-reports/',
                                reportFiles: '*.html',
                                reportName: 'TESTS REPORT',
                                reportTitles: ''
                            ])

                        } catch (Exception e) {
                           echo 'Exception occurred: ' + e.toString()
                           sh "./pipelines/build-update.sh etendo_gradle_plugin FAILED 'Build failed'"
                           echo '....FAILED TESTS....'
                           currentBuild.result = 'UNSTABLE'
                           unstable('Failed Plugin Tests')
                           publishHTML([
                               allowMissing: false,
                               alwaysLinkToLastBuild: false,
                               keepAll: true,
                               reportDir: 'build/spock-reports/',
                               reportFiles: '*.html',
                               reportName: 'TESTS REPORT',
                               reportTitles: ''
                           ])
                        }
                    }
                }
            }
        }
        stage('Run Deploy Snapshot') {
            when {
                branch 'develop'
                expression {
                    currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'my-credentials', keyFileVariable: 'keyfile')]) {
                    withCredentials([usernamePassword(credentialsId: "koodu_credentials", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        sh """
                        git config user.name "$GIT_USERNAME"
                        git config user.email "$GIT_USERNAME"
                        """
                        sh "echo version.ts=\$(date +\"%s\") > version.properties"
                        sh "./gradlew publish --info"
                        sh "git tag \"v\$(grep version.ts version.properties|cut -c 11-)\" -m \"Release SNAPSHOT \$(grep version.tag version.properties|cut -c 13-)\""
                        sh "GIT_SSH_COMMAND=\"ssh -i ${keyfile}\" git push $GIT_URL \"v\$(grep version.ts version.properties|cut -c 11-)\""
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs deleteDirs: true
        }
    }
}