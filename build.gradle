plugins {
    id 'java'
    id 'groovy'
    id 'java-gradle-plugin'
    id 'maven-publish'
}

def MAIN = "main"
def DEV    = "dev"
def PROD   = "prod"

final String URL_PROD = "https://maven.pkg.github.com/etendosoftware/com.etendoerp.gradleplugin"
final String URL_DEV = "https://repo.futit.cloud/repository/maven-public-snapshots"
final String PLUGIN_VERSION = "1.2.2"
// Default mode
def mode = DEV

// If the version is updated, make sure to change it in the 'EtendoPlugin' class
def pluginVersion = PLUGIN_VERSION

static def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

if (MAIN == gitBranch()) {
    mode = PROD
}
if (mode == DEV) {
    pluginVersion += "-SNAPSHOT"
}

def urlToPublish = (mode == PROD) ? URL_PROD : URL_DEV

group 'com.etendoerp'
version(pluginVersion)

repositories {
    mavenCentral()
}

publishing {
    repositories {
        maven {
            credentials {
                if (mode == PROD) {
                    username "$githubUser"
                    password "$githubToken"
                } else {
                    username "$nexusUser"
                    password "$nexusPassword"
                }
            }
            url(urlToPublish)
        }
    }
}

dependencies {
    implementation     gradleApi()
    testImplementation gradleTestKit()

    // https://mvnrepository.com/artifact/org.apache.commons/commons-dbcp2
    implementation group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.9.0'

    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    implementation 'org.postgresql:postgresql:42.5.4'

    // https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc8
    implementation 'com.oracle.database.jdbc:ojdbc8:21.6.0.0.1'

    // https://mvnrepository.com/artifact/org.jdom/jdom2
    implementation("org.jdom:jdom2:2.0.5") {
        exclude group: 'jdom', module: 'jdom'
    }

    // https://mvnrepository.com/artifact/jaxen/jaxen
    implementation("jaxen:jaxen:1.1.4") {
        exclude group: 'jdom', module: 'jdom'
    }

    testImplementation 'org.codehaus.groovy:groovy-all:3.0.9'
    testImplementation platform("org.spockframework:spock-bom:2.0-M4-groovy-3.0")
    testImplementation 'org.spockframework:spock-core'
    testImplementation 'org.spockframework:spock-junit4'
    testImplementation 'junit:junit:4.13.1'
    testImplementation( "com.athaydes:spock-reports:2.0-groovy-3.0" ) {
        transitive = false // this avoids affecting your version of Groovy/Spock
    }
    testImplementation 'org.postgresql:postgresql:42.5.4'

}

tasks.withType(Test).configureEach {
    // Using JUnitPlatform for running tests
    useJUnitPlatform()
}

test {
    systemProperty 'com.athaydes.spockframework.report.showCodeBlocks', true
    systemProperty 'nexusUser', project.hasProperty('nexusUser') ? project.nexusUser : System.getenv("NEXUS_USR")
    systemProperty 'nexusPassword', project.hasProperty('nexusPassword') ? project.nexusPassword : System.getenv("NEXUS_PSW")
    systemProperty 'test.bbdd.sid', project['test.bbdd.sid']
    systemProperty 'test.bbdd.systemUser', project['test.bbdd.systemUser']
    systemProperty 'test.bbdd.systemPassword', project['test.bbdd.systemPassword']
    systemProperty 'test.bbdd.user', project['test.bbdd.systemUser']
    systemProperty 'test.bbdd.password', project['test.bbdd.systemPassword']
    systemProperty 'test.bbdd.url', project['test.bbdd.url']
    systemProperty 'org.gradle.jvmargs', '-Xmx2g -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8'
    environment 'JAVA_HOME', System.getenv('JAVA_HOME')

    maxHeapSize = "2048m"
}

task upgradePluginVersion() {
    final String MAJOR = 'major'
    final String MINOR = 'minor'
    final String PATCH = 'patch'
    doLast {
        def typeVersion
        if (project.hasProperty('type')){
            typeVersion = project.getProperty('type')
        } else {
            throw new GradleException("The parameter -Ptype is required")
        }

        if (typeVersion != MAJOR && typeVersion != MINOR && typeVersion != PATCH) {
            throw new GradleException("The parameter value '${typeVersion}' is not valid, the options should be 'major', 'minor' or 'patch'")
        }

        def version = PLUGIN_VERSION.trim().split("\\.")
        if (version.length != 3) {
            throw new GradleException("The version must be in the format major.minor.patch")
        }

        if (typeVersion == MAJOR) {
            version[0]++
            version[1] = 0
            version[2] = 0
        } else if (typeVersion == MINOR) {
            version[1]++
            version[2] = 0
        } else if (typeVersion == PATCH) {
            version[2]++
        }
        def nextVersion = "${version[0]}.${version[1]}.${version[2]}"

        //Rewrite build.gradle file with new value
        def buildGradleContent = file('build.gradle').text
        buildGradleContent = buildGradleContent.replaceAll(/PLUGIN_VERSION = \"${PLUGIN_VERSION}\"/, "PLUGIN_VERSION = \"${nextVersion}\"")
        file('build.gradle').write(buildGradleContent)

        //Rewrite EtendoPlugin.groovy file with new value
        def etendoPluginContent = file('src/main/groovy/com/etendoerp/EtendoPlugin.groovy').text
        etendoPluginContent = etendoPluginContent.replaceAll(/PLUGIN_VERSION = \"\d+.\d+.\d+\"/, "PLUGIN_VERSION = \"${nextVersion}\"")
        file('src/main/groovy/com/etendoerp/EtendoPlugin.groovy').write(etendoPluginContent)
    }
}

gradlePlugin {
    plugins {
        etendoPlugin {
            id = "com.etendoerp.gradleplugin"
            implementationClass = "com.etendoerp.EtendoPlugin"
        }
    }
}

test.onlyIf { false }

